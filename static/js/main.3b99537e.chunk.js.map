{"version":3,"sources":["components/shared/Box.jsx","components/effects/Confetti/Confetti.jsx","components/bingo/Tile.jsx","components/bingo/Content.jsx","components/bingo/ShuffleBtn.jsx","App/App.js","index.js"],"names":["Box","children","classNames","className","Confetti","start","W","window","innerWidth","H","innerHeight","canvas","document","getElementById","context","getContext","maxConfettis","particles","possibleColors","confettiParticle","from","to","this","x","Math","random","y","r","floor","d","color","length","tilt","tiltAngleIncremental","tiltAngle","draw","beginPath","lineWidth","strokeStyle","moveTo","lineTo","stroke","addEventListener","width","height","i","push","Draw","results","requestAnimationFrame","clearRect","particle","cos","sin","remainingFlakes","useEffect","id","Tile","onToggle","isSet","onClick","Content","reference","ref","ShuffleBtn","disabled","type","initialSet","Array","_","initPlayerState","player1","checked","12","won","player2","initialFlip","App","useState","fullSet","setFullSet","sliceNewDeck","deck","setDeck","state","setState","currItem","setCurrItem","flip","setFlip","numRef","useRef","data","range","arrayShuffle","slice","toggle","player","undefined","find","row","every","column","index","isWon","shuffleBtnHandler","prev","resetFlip","setTimeout","current","classList","remove","contains","add","filter","el","map","item","e","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3b99537e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport '../../styles/boxes.scss'\r\n\r\nconst Box = ({ children, classNames }) => {\r\n  return <div className={classNames}>{children}</div>\r\n}\r\n\r\nexport default Box\r\n","import { useEffect } from 'react'\r\n\r\nimport './confetti.scss'\r\n\r\nconst Confetti = () => {\r\n  function start() {\r\n    let W = window.innerWidth\r\n    let H = window.innerHeight\r\n    const canvas = document.getElementById('canvas')\r\n    const context = canvas.getContext('2d')\r\n    const maxConfettis = 150\r\n    const particles = []\r\n\r\n    const possibleColors = [\r\n      'DodgerBlue',\r\n      'OliveDrab',\r\n      'Gold',\r\n      'Pink',\r\n      'SlateBlue',\r\n      'LightBlue',\r\n      'Gold',\r\n      'Violet',\r\n      'PaleGreen',\r\n      'SteelBlue',\r\n      'SandyBrown',\r\n      'Chocolate',\r\n      'Crimson'\r\n    ]\r\n\r\n    function randomFromTo(from, to) {\r\n      return Math.floor(Math.random() * (to - from + 1) + from)\r\n    }\r\n\r\n    function confettiParticle() {\r\n      this.x = Math.random() * W // x\r\n      this.y = Math.random() * H - H // y\r\n      this.r = randomFromTo(11, 33) // radius\r\n      this.d = Math.random() * maxConfettis + 11\r\n      this.color =\r\n        possibleColors[Math.floor(Math.random() * possibleColors.length)]\r\n      this.tilt = Math.floor(Math.random() * 33) - 11\r\n      this.tiltAngleIncremental = Math.random() * 0.07 + 0.05\r\n      this.tiltAngle = 0\r\n\r\n      this.draw = function () {\r\n        context.beginPath()\r\n        context.lineWidth = this.r / 2\r\n        context.strokeStyle = this.color\r\n        context.moveTo(this.x + this.tilt + this.r / 3, this.y)\r\n        context.lineTo(this.x + this.tilt, this.y + this.tilt + this.r / 5)\r\n        return context.stroke()\r\n      }\r\n    }\r\n\r\n    function Draw() {\r\n      const results = []\r\n\r\n      // Magical recursive functional love\r\n      requestAnimationFrame(Draw)\r\n\r\n      context.clearRect(0, 0, W, window.innerHeight)\r\n\r\n      for (var i = 0; i < maxConfettis; i++) {\r\n        results.push(particles[i].draw())\r\n      }\r\n\r\n      let particle = {}\r\n      let remainingFlakes = 0\r\n      for (let i = 0; i < maxConfettis; i++) {\r\n        particle = particles[i]\r\n\r\n        particle.tiltAngle += particle.tiltAngleIncremental\r\n        particle.y += (Math.cos(particle.d) + 3 + particle.r / 2) / 2\r\n        particle.tilt = Math.sin(particle.tiltAngle - i / 3) * 15\r\n\r\n        if (particle.y <= H) remainingFlakes++\r\n\r\n        // If a confetti has fluttered out of view,\r\n        // bring it back to above the viewport and let if re-fall.\r\n        if (particle.x > W + 30 || particle.x < -30 || particle.y > H) {\r\n          particle.x = Math.random() * W\r\n          particle.y = -30\r\n          particle.tilt = Math.floor(Math.random() * 10) - 20\r\n        }\r\n      }\r\n\r\n      return results\r\n    }\r\n\r\n    window.addEventListener(\r\n      'resize',\r\n      function () {\r\n        W = window.innerWidth\r\n        H = window.innerHeight\r\n        canvas.width = window.innerWidth\r\n        canvas.height = window.innerHeight\r\n      },\r\n      false\r\n    )\r\n\r\n    // Push new confetti objects to `particles[]`\r\n    for (var i = 0; i < maxConfettis; i++) {\r\n      particles.push(new confettiParticle())\r\n    }\r\n\r\n    // Initialize\r\n    canvas.width = W\r\n    canvas.height = H\r\n    Draw()\r\n  }\r\n\r\n  useEffect(() => {\r\n    start()\r\n  })\r\n\r\n  return <canvas id=\"canvas\" />\r\n}\r\n\r\nexport default Confetti\r\n","import React from 'react'\r\n\r\nconst Tile = ({ children, onToggle, isSet }) => {\r\n  return (\r\n    <div onClick={onToggle} className={`tile ${isSet ? 'tile--set' : ''}`}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tile\r\n","import React from 'react'\r\n\r\nconst Content = ({ children, reference }) => {\r\n  return (\r\n    <div ref={reference} className=\"content  fade-in\">\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Content\r\n","import '../../styles/buttons.scss'\r\n\r\nconst ShuffleBtn = ({ onClick, disabled }) => {\r\n  return (\r\n    <button\r\n      className=\"btn-0\"\r\n      type=\"button\"\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n    >\r\n      Shuffle\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default ShuffleBtn\r\n","import { useState, useEffect, useRef } from 'react'\r\n\r\n/* function to shufle an array */\r\nimport arrayShuffle from 'array-shuffle'\r\n\r\nimport './App.scss'\r\nimport '../styles/modules/_animations.scss'\r\nimport '../styles/buttons.scss'\r\n\r\nimport Box from '../components/shared/Box'\r\nimport Confetti from '../components/effects/Confetti'\r\n\r\nimport Tile from '../components/bingo/Tile'\r\nimport Content from '../components/bingo/Content'\r\nimport ShuffleBtn from '../components/bingo/ShuffleBtn'\r\n\r\n/* create array from of 100 items as bingo umbers */\r\nconst initialSet = [...Array.from({ length: 100 }, (_, i) => i)]\r\nconst initPlayerState = {\r\n  player1: { checked: { 12: true }, won: false },\r\n  player2: { checked: { 12: true }, won: false }\r\n}\r\nconst initialFlip = { player1: true, player2: true }\r\n\r\nfunction App() {\r\n  /* Full bingo set randomly get a new tile  */\r\n  const [fullSet, setFullSet] = useState(initialSet)\r\n  const [deck, setDeck] = useState({\r\n    player1: sliceNewDeck(initialSet, 25),\r\n    player2: sliceNewDeck(initialSet, 25)\r\n  })\r\n  /* Boar's state. Which tiles are filled, a status of a win   */\r\n  const [state, setState] = useState(initPlayerState)\r\n  const [currItem, setCurrItem] = useState()\r\n  /* For flip animation */\r\n  const [flip, setFlip] = useState(initialFlip)\r\n\r\n  const numRef = useRef(null)\r\n\r\n  function sliceNewDeck(data, range) {\r\n    return arrayShuffle(data.slice(0, range))\r\n  }\r\n\r\n  /* Checking a status based on the current board situation */\r\n  function toggle(id, player) {\r\n    const checked = {\r\n      ...state[player].checked,\r\n      [id]: !state[player].checked[id]\r\n    }\r\n    const won = isWon(checked)\r\n    setState({ ...state, [player]: { checked, won } })\r\n  }\r\n\r\n  /* Detecting if lines are filled in (based on bingo rules) and there is a win*/\r\n  function isWon(checked) {\r\n    const range = [0, 1, 2, 3, 4]\r\n    return (\r\n      undefined !==\r\n        range.find((row) =>\r\n          range.every((column) => checked[row * 5 + column])\r\n        ) ||\r\n      undefined !==\r\n        range.find((column) =>\r\n          range.every((row) => checked[row * 5 + column])\r\n        ) ||\r\n      range.every((index) => checked[index * 5 + index]) ||\r\n      range.every((index) => checked[index * 5 + 4 - index])\r\n    )\r\n  }\r\n\r\n  function getRndNum(data) {\r\n    return data[Math.floor(Math.random() * data.length)]\r\n  }\r\n\r\n  const shuffleBtnHandler = (player) => {\r\n    if (player === 'player1') {\r\n      setDeck((prev) => {\r\n        return { ...prev, [player]: sliceNewDeck(initialSet, 25) }\r\n      })\r\n      setState((prev) => {\r\n        return { ...prev, [player]: { checked: { 12: true }, won: false } }\r\n      })\r\n    }\r\n\r\n    if (player === 'player2') {\r\n      setDeck((prev) => {\r\n        return { ...prev, [player]: sliceNewDeck(initialSet, 25) }\r\n      })\r\n      setState((prev) => {\r\n        return { ...prev, [player]: { checked: { 12: true }, won: false } }\r\n      })\r\n    }\r\n\r\n    setFlip((prev) => {\r\n      return { ...prev, [player]: true }\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    setCurrItem(getRndNum(fullSet))\r\n  }, [fullSet])\r\n\r\n  useEffect(() => {\r\n    if (flip.player1 || flip.player2) {\r\n      const resetFlip = { player1: false, player2: false }\r\n      setTimeout(() => {\r\n        setFlip(resetFlip)\r\n      }, 2000)\r\n    }\r\n  }, [flip])\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      numRef.current.classList.remove('fade-in')\r\n    }, 1000)\r\n  }, [currItem])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Bingo game</h1>\r\n\r\n      <div id=\"content\">\r\n        <Box classNames=\"box-1\">\r\n          <Content reference={numRef}>{currItem}</Content>\r\n        </Box>\r\n\r\n        <button\r\n          id=\"getNextNum-btn\"\r\n          className=\"btn-1\"\r\n          onClick={() => {\r\n            if (numRef.current.classList.contains('fade-in') === false) {\r\n              numRef.current.classList.add('fade-in')\r\n              setFullSet((prev) => prev.filter((el) => el !== currItem))\r\n            }\r\n          }}\r\n        >\r\n          Next number\r\n        </button>\r\n      </div>\r\n\r\n      <div id=\"board\">\r\n        <div className=\"grid\" id=\"player-1\">\r\n          {deck.player1.map((item, i) => {\r\n            if (i === 12) {\r\n              return (\r\n                <ShuffleBtn\r\n                  key=\"shuffle-btn\"\r\n                  disabled={flip.player1}\r\n                  onClick={() => shuffleBtnHandler('player1')}\r\n                />\r\n              )\r\n            }\r\n\r\n            return (\r\n              <Box\r\n                key={item}\r\n                classNames={`box-0 ${flip.player1 && 'flip-animation'}`}\r\n              >\r\n                <Tile\r\n                  isSet={!!state.player1.checked[i]}\r\n                  onToggle={(e) => toggle(i, 'player1')}\r\n                >\r\n                  {item}\r\n                </Tile>\r\n              </Box>\r\n            )\r\n          })}\r\n        </div>\r\n\r\n        <div className=\"grid\" id=\"player-2\">\r\n          {deck.player2.map((item, i) => {\r\n            if (i === 12) {\r\n              return (\r\n                <ShuffleBtn\r\n                  key=\"shuffle-btn\"\r\n                  disabled={flip.player2}\r\n                  onClick={() => shuffleBtnHandler('player2')}\r\n                />\r\n              )\r\n            }\r\n\r\n            return (\r\n              <Box\r\n                key={item}\r\n                classNames={`box-0 ${flip.player2 && 'flip-animation'}`}\r\n              >\r\n                <Tile\r\n                  isSet={!!state.player2.checked[i]}\r\n                  onToggle={(e) => toggle(i, 'player2')}\r\n                >\r\n                  {item}\r\n                </Tile>\r\n              </Box>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n      {state.player1.won || state.player2.won ? <Confetti /> : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}